import { Readable } from 'node:stream';
import { getTRPCErrorFromUnknown } from '../../unstable-core-do-not-import/error/TRPCError.mjs';
import { resolveResponse } from '../../unstable-core-do-not-import/http/resolveResponse.mjs';
import '../../unstable-core-do-not-import/rootConfig.mjs';
import { incomingMessageToRequest } from './incomingMessageToRequest.mjs';

/**
 * If you're making an adapter for tRPC and looking at this file for reference, you should import types and functions from `@trpc/server` and `@trpc/server/http`
 *
 * @example
 * ```ts
 * import type { AnyTRPCRouter } from '@trpc/server'
 * import type { HTTPBaseHandlerOptions } from '@trpc/server/http'
 * ```
 */ // @trpc/server
async function nodeHTTPRequestHandler(opts) {
    const handleViaMiddleware = opts.middleware ?? ((_req, _res, next)=>next());
    return handleViaMiddleware(opts.req, opts.res, async (err)=>{
        const req = incomingMessageToRequest(opts.req, {
            maxBodySize: opts.maxBodySize ?? null
        });
        // Build tRPC dependencies
        const createContext = async (innerOpts)=>{
            return await opts.createContext?.({
                ...opts,
                ...innerOpts
            });
        };
        const response = await resolveResponse({
            ...opts,
            req,
            error: err ? getTRPCErrorFromUnknown(err) : null,
            createContext,
            onError (o) {
                opts?.onError?.({
                    ...o,
                    req: opts.req
                });
            }
        });
        if (opts.res.statusCode === 200) {
            // if the status code is set, we assume that it's been manually overridden
            opts.res.statusCode = response.status;
        }
        for (const [key, value] of response.headers){
            opts.res.setHeader(key, value);
        }
        if (response.body) {
            Readable.fromWeb(response.body).pipe(opts.res);
        } else {
            opts.res.end();
        }
    });
}

export { nodeHTTPRequestHandler };
